// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               v3.19.1
// source: yeying/api/common/code.proto

/* eslint-disable */

export const protobufPackage = "yeying.api.common";

/**
 * 接口的响应状态码定义遵循的规则，必须包含以下4个说明：
 * 1、编码
 * 2、编号
 * 3、含义
 * 4、使用场景
 */
export enum ResponseCodeEnum {
  /** RESPONSE_CODE_UNKNOWN - 未知编码，是一种占位符 */
  RESPONSE_CODE_UNKNOWN = 0,
  /**
   * OK - 含义：操作完成
   * 使用场景：成功创建、成功提交
   */
  OK = 1,
  /**
   * INVALID_ARGUMENT - 含义：提供的参数无效或不符合预期
   * 使用场景：当接收到客户端请求参数不正确时返回
   */
  INVALID_ARGUMENT = 2,
  /**
   * UNAUTHENTICATED - 含义：请求未通过身份验证
   * 使用场景：当请求需要身份验证但未提供有效凭据时返回
   */
  UNAUTHENTICATED = 3,
  /**
   * PERMISSION_DENIED - 含义：请求无法被执行，因为没有足够的权限
   * 使用场景：当客户端没有执行请求所需操作的权限时返回
   */
  PERMISSION_DENIED = 4,
  /**
   * NOT_FOUND - 含义：请求对象或资源未找到
   * 使用场景：当请求的对象或资源不存在时返回
   */
  NOT_FOUND = 5,
  /**
   * ALREADY_EXISTS - 含义：请求创建的对象已经存在
   * 使用场景：当请求创建的对象（如用户、资源等）已经存在时返回
   */
  ALREADY_EXISTS = 6,
  /**
   * LIMIT_EXCEEDED - 含义：超过了资源使用限制
   * 使用场景：当请求操作超过了预先设定的限制时返回
   */
  LIMIT_EXCEEDED = 7,
  /**
   * UNAVAILABLE - 含义：请求的服务当前不可用
   * 使用场景：当请求的服务不可用（例如服务器维护、过载等）时返回
   */
  UNAVAILABLE = 8,
  /**
   * UNKNOWN_ERROR - 含义：未知错误
   * 使用场景：当出现未知错误时返回或无法精确匹配到其他错误码时使用
   */
  UNKNOWN_ERROR = 9,
  /**
   * NETWORK_ERROR - 含义：网络错误
   * 使用场景：应为网络错误，无法发送到服务器
   */
  NETWORK_ERROR = 10,
  /**
   * INVALID_CERT - 含义：无效证书
   * 使用场景：浏览器无法识别证书，在浏览器中添加为受信任证书
   */
  INVALID_CERT = 11,
  /**
   * NOT_SUPPORTED - 含义：不支持
   * 使用场景：接口、服务不支持
   */
  NOT_SUPPORTED = 12,
  UNRECOGNIZED = -1,
}

export function responseCodeEnumFromJSON(object: any): ResponseCodeEnum {
  switch (object) {
    case 0:
    case "RESPONSE_CODE_UNKNOWN":
      return ResponseCodeEnum.RESPONSE_CODE_UNKNOWN;
    case 1:
    case "OK":
      return ResponseCodeEnum.OK;
    case 2:
    case "INVALID_ARGUMENT":
      return ResponseCodeEnum.INVALID_ARGUMENT;
    case 3:
    case "UNAUTHENTICATED":
      return ResponseCodeEnum.UNAUTHENTICATED;
    case 4:
    case "PERMISSION_DENIED":
      return ResponseCodeEnum.PERMISSION_DENIED;
    case 5:
    case "NOT_FOUND":
      return ResponseCodeEnum.NOT_FOUND;
    case 6:
    case "ALREADY_EXISTS":
      return ResponseCodeEnum.ALREADY_EXISTS;
    case 7:
    case "LIMIT_EXCEEDED":
      return ResponseCodeEnum.LIMIT_EXCEEDED;
    case 8:
    case "UNAVAILABLE":
      return ResponseCodeEnum.UNAVAILABLE;
    case 9:
    case "UNKNOWN_ERROR":
      return ResponseCodeEnum.UNKNOWN_ERROR;
    case 10:
    case "NETWORK_ERROR":
      return ResponseCodeEnum.NETWORK_ERROR;
    case 11:
    case "INVALID_CERT":
      return ResponseCodeEnum.INVALID_CERT;
    case 12:
    case "NOT_SUPPORTED":
      return ResponseCodeEnum.NOT_SUPPORTED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ResponseCodeEnum.UNRECOGNIZED;
  }
}

export function responseCodeEnumToJSON(object: ResponseCodeEnum): string {
  switch (object) {
    case ResponseCodeEnum.RESPONSE_CODE_UNKNOWN:
      return "RESPONSE_CODE_UNKNOWN";
    case ResponseCodeEnum.OK:
      return "OK";
    case ResponseCodeEnum.INVALID_ARGUMENT:
      return "INVALID_ARGUMENT";
    case ResponseCodeEnum.UNAUTHENTICATED:
      return "UNAUTHENTICATED";
    case ResponseCodeEnum.PERMISSION_DENIED:
      return "PERMISSION_DENIED";
    case ResponseCodeEnum.NOT_FOUND:
      return "NOT_FOUND";
    case ResponseCodeEnum.ALREADY_EXISTS:
      return "ALREADY_EXISTS";
    case ResponseCodeEnum.LIMIT_EXCEEDED:
      return "LIMIT_EXCEEDED";
    case ResponseCodeEnum.UNAVAILABLE:
      return "UNAVAILABLE";
    case ResponseCodeEnum.UNKNOWN_ERROR:
      return "UNKNOWN_ERROR";
    case ResponseCodeEnum.NETWORK_ERROR:
      return "NETWORK_ERROR";
    case ResponseCodeEnum.INVALID_CERT:
      return "INVALID_CERT";
    case ResponseCodeEnum.NOT_SUPPORTED:
      return "NOT_SUPPORTED";
    case ResponseCodeEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * 合约的状态码需要遵守的规则：
 * 1、编码
 * 2、编号
 * 3、含义
 * 4、使用场景
 */
export enum ContractStatusEnum {
  /** CONTRACT_STATUS_UNKNOWN - 未知编码，是一种占位符 */
  CONTRACT_STATUS_UNKNOWN = 0,
  /** CONTRACT_STATUS_INACTIVATED - 未生效，拟定了一份合同，参与方没有完全签字 */
  CONTRACT_STATUS_INACTIVATED = 1,
  /** CONTRACT_STATUS_ACTIVATED - 生效中，合同的参与方都已签字认可，合同已经开始工作 */
  CONTRACT_STATUS_ACTIVATED = 2,
  /** CONTRACT_STATUS_EXPIRED - 过期了，合同已经过期了，合同已停止工作 */
  CONTRACT_STATUS_EXPIRED = 3,
  /** CONTRACT_STATUS_CANCELED - 终止了，合同的参与方中有人主动退出了合同 */
  CONTRACT_STATUS_CANCELED = 4,
  UNRECOGNIZED = -1,
}

export function contractStatusEnumFromJSON(object: any): ContractStatusEnum {
  switch (object) {
    case 0:
    case "CONTRACT_STATUS_UNKNOWN":
      return ContractStatusEnum.CONTRACT_STATUS_UNKNOWN;
    case 1:
    case "CONTRACT_STATUS_INACTIVATED":
      return ContractStatusEnum.CONTRACT_STATUS_INACTIVATED;
    case 2:
    case "CONTRACT_STATUS_ACTIVATED":
      return ContractStatusEnum.CONTRACT_STATUS_ACTIVATED;
    case 3:
    case "CONTRACT_STATUS_EXPIRED":
      return ContractStatusEnum.CONTRACT_STATUS_EXPIRED;
    case 4:
    case "CONTRACT_STATUS_CANCELED":
      return ContractStatusEnum.CONTRACT_STATUS_CANCELED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ContractStatusEnum.UNRECOGNIZED;
  }
}

export function contractStatusEnumToJSON(object: ContractStatusEnum): string {
  switch (object) {
    case ContractStatusEnum.CONTRACT_STATUS_UNKNOWN:
      return "CONTRACT_STATUS_UNKNOWN";
    case ContractStatusEnum.CONTRACT_STATUS_INACTIVATED:
      return "CONTRACT_STATUS_INACTIVATED";
    case ContractStatusEnum.CONTRACT_STATUS_ACTIVATED:
      return "CONTRACT_STATUS_ACTIVATED";
    case ContractStatusEnum.CONTRACT_STATUS_EXPIRED:
      return "CONTRACT_STATUS_EXPIRED";
    case ContractStatusEnum.CONTRACT_STATUS_CANCELED:
      return "CONTRACT_STATUS_CANCELED";
    case ContractStatusEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** 语言类型 */
export enum LanguageCodeEnum {
  /** LANGUAGE_CODE_UNKNOWN - 未知编码，是一种占位符 */
  LANGUAGE_CODE_UNKNOWN = 0,
  /** LANGUAGE_CODE_ZH_CH - 简体中文 */
  LANGUAGE_CODE_ZH_CH = 1,
  /** LANGUAGE_CODE_EN_US - 美国英语 */
  LANGUAGE_CODE_EN_US = 2,
  UNRECOGNIZED = -1,
}

export function languageCodeEnumFromJSON(object: any): LanguageCodeEnum {
  switch (object) {
    case 0:
    case "LANGUAGE_CODE_UNKNOWN":
      return LanguageCodeEnum.LANGUAGE_CODE_UNKNOWN;
    case 1:
    case "LANGUAGE_CODE_ZH_CH":
      return LanguageCodeEnum.LANGUAGE_CODE_ZH_CH;
    case 2:
    case "LANGUAGE_CODE_EN_US":
      return LanguageCodeEnum.LANGUAGE_CODE_EN_US;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LanguageCodeEnum.UNRECOGNIZED;
  }
}

export function languageCodeEnumToJSON(object: LanguageCodeEnum): string {
  switch (object) {
    case LanguageCodeEnum.LANGUAGE_CODE_UNKNOWN:
      return "LANGUAGE_CODE_UNKNOWN";
    case LanguageCodeEnum.LANGUAGE_CODE_ZH_CH:
      return "LANGUAGE_CODE_ZH_CH";
    case LanguageCodeEnum.LANGUAGE_CODE_EN_US:
      return "LANGUAGE_CODE_EN_US";
    case LanguageCodeEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** API编码，针对服务做一些原子的、标准化的工作，方便第三方接入区块链网络，也方便服务使用者集成使用 */
export enum ApiCodeEnum {
  /** API_CODE_UNKNOWN - 未知编码，是一种占位符 */
  API_CODE_UNKNOWN = 0,
  /** API_CODE_USER - 用户服务 */
  API_CODE_USER = 1,
  /** API_CODE_IDENTITY - 身份服务 */
  API_CODE_IDENTITY = 2,
  /** API_CODE_LLM - 大模型服务 */
  API_CODE_LLM = 3,
  /** API_CODE_ASSET - 资产服务 */
  API_CODE_ASSET = 4,
  /** API_CODE_CERTIFICATE - 证书服务 */
  API_CODE_CERTIFICATE = 5,
  /** API_CODE_STORAGE - 存储服务 */
  API_CODE_STORAGE = 6,
  /** API_CODE_APPLICATION - 应用仓库 */
  API_CODE_APPLICATION = 7,
  /** API_CODE_EVENT - 事件服务 */
  API_CODE_EVENT = 8,
  /** API_CODE_INVITATION - 邀请码服务 */
  API_CODE_INVITATION = 9,
  /** API_CODE_SERVICE - 服务接口 */
  API_CODE_SERVICE = 10,
  UNRECOGNIZED = -1,
}

export function apiCodeEnumFromJSON(object: any): ApiCodeEnum {
  switch (object) {
    case 0:
    case "API_CODE_UNKNOWN":
      return ApiCodeEnum.API_CODE_UNKNOWN;
    case 1:
    case "API_CODE_USER":
      return ApiCodeEnum.API_CODE_USER;
    case 2:
    case "API_CODE_IDENTITY":
      return ApiCodeEnum.API_CODE_IDENTITY;
    case 3:
    case "API_CODE_LLM":
      return ApiCodeEnum.API_CODE_LLM;
    case 4:
    case "API_CODE_ASSET":
      return ApiCodeEnum.API_CODE_ASSET;
    case 5:
    case "API_CODE_CERTIFICATE":
      return ApiCodeEnum.API_CODE_CERTIFICATE;
    case 6:
    case "API_CODE_STORAGE":
      return ApiCodeEnum.API_CODE_STORAGE;
    case 7:
    case "API_CODE_APPLICATION":
      return ApiCodeEnum.API_CODE_APPLICATION;
    case 8:
    case "API_CODE_EVENT":
      return ApiCodeEnum.API_CODE_EVENT;
    case 9:
    case "API_CODE_INVITATION":
      return ApiCodeEnum.API_CODE_INVITATION;
    case 10:
    case "API_CODE_SERVICE":
      return ApiCodeEnum.API_CODE_SERVICE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ApiCodeEnum.UNRECOGNIZED;
  }
}

export function apiCodeEnumToJSON(object: ApiCodeEnum): string {
  switch (object) {
    case ApiCodeEnum.API_CODE_UNKNOWN:
      return "API_CODE_UNKNOWN";
    case ApiCodeEnum.API_CODE_USER:
      return "API_CODE_USER";
    case ApiCodeEnum.API_CODE_IDENTITY:
      return "API_CODE_IDENTITY";
    case ApiCodeEnum.API_CODE_LLM:
      return "API_CODE_LLM";
    case ApiCodeEnum.API_CODE_ASSET:
      return "API_CODE_ASSET";
    case ApiCodeEnum.API_CODE_CERTIFICATE:
      return "API_CODE_CERTIFICATE";
    case ApiCodeEnum.API_CODE_STORAGE:
      return "API_CODE_STORAGE";
    case ApiCodeEnum.API_CODE_APPLICATION:
      return "API_CODE_APPLICATION";
    case ApiCodeEnum.API_CODE_EVENT:
      return "API_CODE_EVENT";
    case ApiCodeEnum.API_CODE_INVITATION:
      return "API_CODE_INVITATION";
    case ApiCodeEnum.API_CODE_SERVICE:
      return "API_CODE_SERVICE";
    case ApiCodeEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** 服务编码 */
export enum ServiceCodeEnum {
  /** SERVICE_CODE_UNKNOWN - 未知编码，是一种占位符 */
  SERVICE_CODE_UNKNOWN = 0,
  /** SERVICE_CODE_NODE - 网络节点服务供应商 */
  SERVICE_CODE_NODE = 1,
  /** SERVICE_CODE_WAREHOUSE - 仓储服务供应商 */
  SERVICE_CODE_WAREHOUSE = 2,
  /** SERVICE_CODE_AGENT - 机器人服务供应商，提供各种模型和算法服务 */
  SERVICE_CODE_AGENT = 3,
  UNRECOGNIZED = -1,
}

export function serviceCodeEnumFromJSON(object: any): ServiceCodeEnum {
  switch (object) {
    case 0:
    case "SERVICE_CODE_UNKNOWN":
      return ServiceCodeEnum.SERVICE_CODE_UNKNOWN;
    case 1:
    case "SERVICE_CODE_NODE":
      return ServiceCodeEnum.SERVICE_CODE_NODE;
    case 2:
    case "SERVICE_CODE_WAREHOUSE":
      return ServiceCodeEnum.SERVICE_CODE_WAREHOUSE;
    case 3:
    case "SERVICE_CODE_AGENT":
      return ServiceCodeEnum.SERVICE_CODE_AGENT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ServiceCodeEnum.UNRECOGNIZED;
  }
}

export function serviceCodeEnumToJSON(object: ServiceCodeEnum): string {
  switch (object) {
    case ServiceCodeEnum.SERVICE_CODE_UNKNOWN:
      return "SERVICE_CODE_UNKNOWN";
    case ServiceCodeEnum.SERVICE_CODE_NODE:
      return "SERVICE_CODE_NODE";
    case ServiceCodeEnum.SERVICE_CODE_WAREHOUSE:
      return "SERVICE_CODE_WAREHOUSE";
    case ServiceCodeEnum.SERVICE_CODE_AGENT:
      return "SERVICE_CODE_AGENT";
    case ServiceCodeEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** 身份编码 */
export enum IdentityCodeEnum {
  /** IDENTITY_CODE_UNKNOWN - 未知编码，是一种占位符 */
  IDENTITY_CODE_UNKNOWN = 0,
  /** IDENTITY_CODE_PERSONAL - 与个人相关的身份 */
  IDENTITY_CODE_PERSONAL = 1,
  /** IDENTITY_CODE_ORGANIZATION - 与组织相关的身份 */
  IDENTITY_CODE_ORGANIZATION = 2,
  /** IDENTITY_CODE_SERVICE - 与服务相关的身份 */
  IDENTITY_CODE_SERVICE = 3,
  /** IDENTITY_CODE_APPLICATION - 与应用相关的身份 */
  IDENTITY_CODE_APPLICATION = 4,
  /** IDENTITY_CODE_ASSET - 与资产相关的身份 */
  IDENTITY_CODE_ASSET = 5,
  UNRECOGNIZED = -1,
}

export function identityCodeEnumFromJSON(object: any): IdentityCodeEnum {
  switch (object) {
    case 0:
    case "IDENTITY_CODE_UNKNOWN":
      return IdentityCodeEnum.IDENTITY_CODE_UNKNOWN;
    case 1:
    case "IDENTITY_CODE_PERSONAL":
      return IdentityCodeEnum.IDENTITY_CODE_PERSONAL;
    case 2:
    case "IDENTITY_CODE_ORGANIZATION":
      return IdentityCodeEnum.IDENTITY_CODE_ORGANIZATION;
    case 3:
    case "IDENTITY_CODE_SERVICE":
      return IdentityCodeEnum.IDENTITY_CODE_SERVICE;
    case 4:
    case "IDENTITY_CODE_APPLICATION":
      return IdentityCodeEnum.IDENTITY_CODE_APPLICATION;
    case 5:
    case "IDENTITY_CODE_ASSET":
      return IdentityCodeEnum.IDENTITY_CODE_ASSET;
    case -1:
    case "UNRECOGNIZED":
    default:
      return IdentityCodeEnum.UNRECOGNIZED;
  }
}

export function identityCodeEnumToJSON(object: IdentityCodeEnum): string {
  switch (object) {
    case IdentityCodeEnum.IDENTITY_CODE_UNKNOWN:
      return "IDENTITY_CODE_UNKNOWN";
    case IdentityCodeEnum.IDENTITY_CODE_PERSONAL:
      return "IDENTITY_CODE_PERSONAL";
    case IdentityCodeEnum.IDENTITY_CODE_ORGANIZATION:
      return "IDENTITY_CODE_ORGANIZATION";
    case IdentityCodeEnum.IDENTITY_CODE_SERVICE:
      return "IDENTITY_CODE_SERVICE";
    case IdentityCodeEnum.IDENTITY_CODE_APPLICATION:
      return "IDENTITY_CODE_APPLICATION";
    case IdentityCodeEnum.IDENTITY_CODE_ASSET:
      return "IDENTITY_CODE_ASSET";
    case IdentityCodeEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** 图片格式 */
export enum ImageFormatEnum {
  /** IMAGE_FORMAT_UNKNOWN - 未知图片格式，是一种占位符 */
  IMAGE_FORMAT_UNKNOWN = 0,
  /** IMAGE_FORMAT_PNG - PNG格式 */
  IMAGE_FORMAT_PNG = 1,
  UNRECOGNIZED = -1,
}

export function imageFormatEnumFromJSON(object: any): ImageFormatEnum {
  switch (object) {
    case 0:
    case "IMAGE_FORMAT_UNKNOWN":
      return ImageFormatEnum.IMAGE_FORMAT_UNKNOWN;
    case 1:
    case "IMAGE_FORMAT_PNG":
      return ImageFormatEnum.IMAGE_FORMAT_PNG;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ImageFormatEnum.UNRECOGNIZED;
  }
}

export function imageFormatEnumToJSON(object: ImageFormatEnum): string {
  switch (object) {
    case ImageFormatEnum.IMAGE_FORMAT_UNKNOWN:
      return "IMAGE_FORMAT_UNKNOWN";
    case ImageFormatEnum.IMAGE_FORMAT_PNG:
      return "IMAGE_FORMAT_PNG";
    case ImageFormatEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** 数字格式 */
export enum DigitalFormatEnum {
  /** DIGITAL_FORMAT_UNKNOWN - 未知数字格式，是一种占位符 */
  DIGITAL_FORMAT_UNKNOWN = 0,
  /** DIGITAL_FORMAT_TEXT - 文本 */
  DIGITAL_FORMAT_TEXT = 1,
  /** DIGITAL_FORMAT_IMAGE - 图片 */
  DIGITAL_FORMAT_IMAGE = 2,
  /** DIGITAL_FORMAT_VIDEO - 视频 */
  DIGITAL_FORMAT_VIDEO = 3,
  /** DIGITAL_FORMAT_AUDIO - 音频 */
  DIGITAL_FORMAT_AUDIO = 4,
  /** DIGITAL_FORMAT_APP - 应用 */
  DIGITAL_FORMAT_APP = 5,
  /** DIGITAL_FORMAT_OTHER - 未知 */
  DIGITAL_FORMAT_OTHER = 10000,
  UNRECOGNIZED = -1,
}

export function digitalFormatEnumFromJSON(object: any): DigitalFormatEnum {
  switch (object) {
    case 0:
    case "DIGITAL_FORMAT_UNKNOWN":
      return DigitalFormatEnum.DIGITAL_FORMAT_UNKNOWN;
    case 1:
    case "DIGITAL_FORMAT_TEXT":
      return DigitalFormatEnum.DIGITAL_FORMAT_TEXT;
    case 2:
    case "DIGITAL_FORMAT_IMAGE":
      return DigitalFormatEnum.DIGITAL_FORMAT_IMAGE;
    case 3:
    case "DIGITAL_FORMAT_VIDEO":
      return DigitalFormatEnum.DIGITAL_FORMAT_VIDEO;
    case 4:
    case "DIGITAL_FORMAT_AUDIO":
      return DigitalFormatEnum.DIGITAL_FORMAT_AUDIO;
    case 5:
    case "DIGITAL_FORMAT_APP":
      return DigitalFormatEnum.DIGITAL_FORMAT_APP;
    case 10000:
    case "DIGITAL_FORMAT_OTHER":
      return DigitalFormatEnum.DIGITAL_FORMAT_OTHER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DigitalFormatEnum.UNRECOGNIZED;
  }
}

export function digitalFormatEnumToJSON(object: DigitalFormatEnum): string {
  switch (object) {
    case DigitalFormatEnum.DIGITAL_FORMAT_UNKNOWN:
      return "DIGITAL_FORMAT_UNKNOWN";
    case DigitalFormatEnum.DIGITAL_FORMAT_TEXT:
      return "DIGITAL_FORMAT_TEXT";
    case DigitalFormatEnum.DIGITAL_FORMAT_IMAGE:
      return "DIGITAL_FORMAT_IMAGE";
    case DigitalFormatEnum.DIGITAL_FORMAT_VIDEO:
      return "DIGITAL_FORMAT_VIDEO";
    case DigitalFormatEnum.DIGITAL_FORMAT_AUDIO:
      return "DIGITAL_FORMAT_AUDIO";
    case DigitalFormatEnum.DIGITAL_FORMAT_APP:
      return "DIGITAL_FORMAT_APP";
    case DigitalFormatEnum.DIGITAL_FORMAT_OTHER:
      return "DIGITAL_FORMAT_OTHER";
    case DigitalFormatEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** 内容格式 */
export enum ContentFormatEnum {
  CONTENT_FORMAT_UNKNOWN = 0,
  CONTENT_FORMAT_URL = 1,
  CONTENT_FORMAT_BASE64 = 2,
  UNRECOGNIZED = -1,
}

export function contentFormatEnumFromJSON(object: any): ContentFormatEnum {
  switch (object) {
    case 0:
    case "CONTENT_FORMAT_UNKNOWN":
      return ContentFormatEnum.CONTENT_FORMAT_UNKNOWN;
    case 1:
    case "CONTENT_FORMAT_URL":
      return ContentFormatEnum.CONTENT_FORMAT_URL;
    case 2:
    case "CONTENT_FORMAT_BASE64":
      return ContentFormatEnum.CONTENT_FORMAT_BASE64;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ContentFormatEnum.UNRECOGNIZED;
  }
}

export function contentFormatEnumToJSON(object: ContentFormatEnum): string {
  switch (object) {
    case ContentFormatEnum.CONTENT_FORMAT_UNKNOWN:
      return "CONTENT_FORMAT_UNKNOWN";
    case ContentFormatEnum.CONTENT_FORMAT_URL:
      return "CONTENT_FORMAT_URL";
    case ContentFormatEnum.CONTENT_FORMAT_BASE64:
      return "CONTENT_FORMAT_BASE64";
    case ContentFormatEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** 会话场景 */
export enum SessionSceneEnum {
  /** SESSION_SCENE_UNKNOWN - 未知编码，是一种占位符 */
  SESSION_SCENE_UNKNOWN = 0,
  /** SESSION_SCENE_DIALOGUE - 对话 */
  SESSION_SCENE_DIALOGUE = 1,
  /** SESSION_SCENE_DRAWING - 作图 */
  SESSION_SCENE_DRAWING = 2,
  /** SESSION_SCENE_TRANSLATION - 翻译 */
  SESSION_SCENE_TRANSLATION = 3,
  UNRECOGNIZED = -1,
}

export function sessionSceneEnumFromJSON(object: any): SessionSceneEnum {
  switch (object) {
    case 0:
    case "SESSION_SCENE_UNKNOWN":
      return SessionSceneEnum.SESSION_SCENE_UNKNOWN;
    case 1:
    case "SESSION_SCENE_DIALOGUE":
      return SessionSceneEnum.SESSION_SCENE_DIALOGUE;
    case 2:
    case "SESSION_SCENE_DRAWING":
      return SessionSceneEnum.SESSION_SCENE_DRAWING;
    case 3:
    case "SESSION_SCENE_TRANSLATION":
      return SessionSceneEnum.SESSION_SCENE_TRANSLATION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SessionSceneEnum.UNRECOGNIZED;
  }
}

export function sessionSceneEnumToJSON(object: SessionSceneEnum): string {
  switch (object) {
    case SessionSceneEnum.SESSION_SCENE_UNKNOWN:
      return "SESSION_SCENE_UNKNOWN";
    case SessionSceneEnum.SESSION_SCENE_DIALOGUE:
      return "SESSION_SCENE_DIALOGUE";
    case SessionSceneEnum.SESSION_SCENE_DRAWING:
      return "SESSION_SCENE_DRAWING";
    case SessionSceneEnum.SESSION_SCENE_TRANSLATION:
      return "SESSION_SCENE_TRANSLATION";
    case SessionSceneEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** 会话角色 */
export enum SessionRoleEnum {
  /** SESSION_ROLE_UNKNOWN - 未知编码，是一种占位符 */
  SESSION_ROLE_UNKNOWN = 0,
  /** SESSION_ROLE_PARTICIPANT - 参与者 */
  SESSION_ROLE_PARTICIPANT = 1,
  /** SESSION_ROLE_ADMIN - 管理员 */
  SESSION_ROLE_ADMIN = 2,
  UNRECOGNIZED = -1,
}

export function sessionRoleEnumFromJSON(object: any): SessionRoleEnum {
  switch (object) {
    case 0:
    case "SESSION_ROLE_UNKNOWN":
      return SessionRoleEnum.SESSION_ROLE_UNKNOWN;
    case 1:
    case "SESSION_ROLE_PARTICIPANT":
      return SessionRoleEnum.SESSION_ROLE_PARTICIPANT;
    case 2:
    case "SESSION_ROLE_ADMIN":
      return SessionRoleEnum.SESSION_ROLE_ADMIN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SessionRoleEnum.UNRECOGNIZED;
  }
}

export function sessionRoleEnumToJSON(object: SessionRoleEnum): string {
  switch (object) {
    case SessionRoleEnum.SESSION_ROLE_UNKNOWN:
      return "SESSION_ROLE_UNKNOWN";
    case SessionRoleEnum.SESSION_ROLE_PARTICIPANT:
      return "SESSION_ROLE_PARTICIPANT";
    case SessionRoleEnum.SESSION_ROLE_ADMIN:
      return "SESSION_ROLE_ADMIN";
    case SessionRoleEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** 参与类型 */
export enum ParticipantTypeEnum {
  /** PARTICIPANT_TYPE_UNKNOWN - 未知编码，是一种占位符 */
  PARTICIPANT_TYPE_UNKNOWN = 0,
  /** PARTICIPANT_TYPE_SERVICE - 服务 */
  PARTICIPANT_TYPE_SERVICE = 1,
  /** PARTICIPANT_TYPE_PEOPLE - 人 */
  PARTICIPANT_TYPE_PEOPLE = 2,
  UNRECOGNIZED = -1,
}

export function participantTypeEnumFromJSON(object: any): ParticipantTypeEnum {
  switch (object) {
    case 0:
    case "PARTICIPANT_TYPE_UNKNOWN":
      return ParticipantTypeEnum.PARTICIPANT_TYPE_UNKNOWN;
    case 1:
    case "PARTICIPANT_TYPE_SERVICE":
      return ParticipantTypeEnum.PARTICIPANT_TYPE_SERVICE;
    case 2:
    case "PARTICIPANT_TYPE_PEOPLE":
      return ParticipantTypeEnum.PARTICIPANT_TYPE_PEOPLE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ParticipantTypeEnum.UNRECOGNIZED;
  }
}

export function participantTypeEnumToJSON(object: ParticipantTypeEnum): string {
  switch (object) {
    case ParticipantTypeEnum.PARTICIPANT_TYPE_UNKNOWN:
      return "PARTICIPANT_TYPE_UNKNOWN";
    case ParticipantTypeEnum.PARTICIPANT_TYPE_SERVICE:
      return "PARTICIPANT_TYPE_SERVICE";
    case ParticipantTypeEnum.PARTICIPANT_TYPE_PEOPLE:
      return "PARTICIPANT_TYPE_PEOPLE";
    case ParticipantTypeEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** 应用状态 */
export enum ApplicationStatusEnum {
  /** APPLICATION_STATUS_UNKNOWN - 未知编码，是一种占位符 */
  APPLICATION_STATUS_UNKNOWN = 0,
  /** APPLICATION_STATUS_CREATED - 已创建 */
  APPLICATION_STATUS_CREATED = 1,
  /** APPLICATION_STATUS_AUDITED - 已审计 */
  APPLICATION_STATUS_AUDITED = 2,
  /** APPLICATION_STATUS_REFUSED - 已拒绝 */
  APPLICATION_STATUS_REFUSED = 3,
  UNRECOGNIZED = -1,
}

export function applicationStatusEnumFromJSON(object: any): ApplicationStatusEnum {
  switch (object) {
    case 0:
    case "APPLICATION_STATUS_UNKNOWN":
      return ApplicationStatusEnum.APPLICATION_STATUS_UNKNOWN;
    case 1:
    case "APPLICATION_STATUS_CREATED":
      return ApplicationStatusEnum.APPLICATION_STATUS_CREATED;
    case 2:
    case "APPLICATION_STATUS_AUDITED":
      return ApplicationStatusEnum.APPLICATION_STATUS_AUDITED;
    case 3:
    case "APPLICATION_STATUS_REFUSED":
      return ApplicationStatusEnum.APPLICATION_STATUS_REFUSED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ApplicationStatusEnum.UNRECOGNIZED;
  }
}

export function applicationStatusEnumToJSON(object: ApplicationStatusEnum): string {
  switch (object) {
    case ApplicationStatusEnum.APPLICATION_STATUS_UNKNOWN:
      return "APPLICATION_STATUS_UNKNOWN";
    case ApplicationStatusEnum.APPLICATION_STATUS_CREATED:
      return "APPLICATION_STATUS_CREATED";
    case ApplicationStatusEnum.APPLICATION_STATUS_AUDITED:
      return "APPLICATION_STATUS_AUDITED";
    case ApplicationStatusEnum.APPLICATION_STATUS_REFUSED:
      return "APPLICATION_STATUS_REFUSED";
    case ApplicationStatusEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** 应用编码 */
export enum ApplicationCodeEnum {
  /** APPLICATION_CODE_UNKNOWN - 未知编码，是一种占位符 */
  APPLICATION_CODE_UNKNOWN = 0,
  /** APPLICATION_CODE_PORTAL - 社区门户 */
  APPLICATION_CODE_PORTAL = 1,
  /** APPLICATION_CODE_STORE - 应用商店 */
  APPLICATION_CODE_STORE = 2,
  /** APPLICATION_CODE_KNOWLEDGE - 知识库应用 */
  APPLICATION_CODE_KNOWLEDGE = 3,
  /** APPLICATION_CODE_WAREHOUSE - 资产仓库应用 */
  APPLICATION_CODE_WAREHOUSE = 4,
  /** APPLICATION_CODE_KEEPER - 智能管家应用，包括钱包 */
  APPLICATION_CODE_KEEPER = 5,
  /** APPLICATION_CODE_SOCIAL - 社交应用 */
  APPLICATION_CODE_SOCIAL = 6,
  /** APPLICATION_CODE_WORKBENCH - 工作台应用 */
  APPLICATION_CODE_WORKBENCH = 7,
  UNRECOGNIZED = -1,
}

export function applicationCodeEnumFromJSON(object: any): ApplicationCodeEnum {
  switch (object) {
    case 0:
    case "APPLICATION_CODE_UNKNOWN":
      return ApplicationCodeEnum.APPLICATION_CODE_UNKNOWN;
    case 1:
    case "APPLICATION_CODE_PORTAL":
      return ApplicationCodeEnum.APPLICATION_CODE_PORTAL;
    case 2:
    case "APPLICATION_CODE_STORE":
      return ApplicationCodeEnum.APPLICATION_CODE_STORE;
    case 3:
    case "APPLICATION_CODE_KNOWLEDGE":
      return ApplicationCodeEnum.APPLICATION_CODE_KNOWLEDGE;
    case 4:
    case "APPLICATION_CODE_WAREHOUSE":
      return ApplicationCodeEnum.APPLICATION_CODE_WAREHOUSE;
    case 5:
    case "APPLICATION_CODE_KEEPER":
      return ApplicationCodeEnum.APPLICATION_CODE_KEEPER;
    case 6:
    case "APPLICATION_CODE_SOCIAL":
      return ApplicationCodeEnum.APPLICATION_CODE_SOCIAL;
    case 7:
    case "APPLICATION_CODE_WORKBENCH":
      return ApplicationCodeEnum.APPLICATION_CODE_WORKBENCH;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ApplicationCodeEnum.UNRECOGNIZED;
  }
}

export function applicationCodeEnumToJSON(object: ApplicationCodeEnum): string {
  switch (object) {
    case ApplicationCodeEnum.APPLICATION_CODE_UNKNOWN:
      return "APPLICATION_CODE_UNKNOWN";
    case ApplicationCodeEnum.APPLICATION_CODE_PORTAL:
      return "APPLICATION_CODE_PORTAL";
    case ApplicationCodeEnum.APPLICATION_CODE_STORE:
      return "APPLICATION_CODE_STORE";
    case ApplicationCodeEnum.APPLICATION_CODE_KNOWLEDGE:
      return "APPLICATION_CODE_KNOWLEDGE";
    case ApplicationCodeEnum.APPLICATION_CODE_WAREHOUSE:
      return "APPLICATION_CODE_WAREHOUSE";
    case ApplicationCodeEnum.APPLICATION_CODE_KEEPER:
      return "APPLICATION_CODE_KEEPER";
    case ApplicationCodeEnum.APPLICATION_CODE_SOCIAL:
      return "APPLICATION_CODE_SOCIAL";
    case ApplicationCodeEnum.APPLICATION_CODE_WORKBENCH:
      return "APPLICATION_CODE_WORKBENCH";
    case ApplicationCodeEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** 密码学类型 */
export enum CipherTypeEnum {
  /** CIPHER_TYPE_UNKNOWN - 未知编码，是一种占位符 */
  CIPHER_TYPE_UNKNOWN = 0,
  /** CIPHER_TYPE_AES_GCM_256 - AES_GCM，加密算法 */
  CIPHER_TYPE_AES_GCM_256 = 1,
  UNRECOGNIZED = -1,
}

export function cipherTypeEnumFromJSON(object: any): CipherTypeEnum {
  switch (object) {
    case 0:
    case "CIPHER_TYPE_UNKNOWN":
      return CipherTypeEnum.CIPHER_TYPE_UNKNOWN;
    case 1:
    case "CIPHER_TYPE_AES_GCM_256":
      return CipherTypeEnum.CIPHER_TYPE_AES_GCM_256;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CipherTypeEnum.UNRECOGNIZED;
  }
}

export function cipherTypeEnumToJSON(object: CipherTypeEnum): string {
  switch (object) {
    case CipherTypeEnum.CIPHER_TYPE_UNKNOWN:
      return "CIPHER_TYPE_UNKNOWN";
    case CipherTypeEnum.CIPHER_TYPE_AES_GCM_256:
      return "CIPHER_TYPE_AES_GCM_256";
    case CipherTypeEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** 鉴权类型 */
export enum AuthenticateTypeEnum {
  /** AUTHENTICATE_TYPE_UNKNOWN - 未知编码，是一种占位符 */
  AUTHENTICATE_TYPE_UNKNOWN = 0,
  /** AUTHENTICATE_TYPE_CERT - 基于证书的认证 */
  AUTHENTICATE_TYPE_CERT = 1,
  /** AUTHENTICATE_TYPE_TOKEN - 基于token的认证 */
  AUTHENTICATE_TYPE_TOKEN = 2,
  UNRECOGNIZED = -1,
}

export function authenticateTypeEnumFromJSON(object: any): AuthenticateTypeEnum {
  switch (object) {
    case 0:
    case "AUTHENTICATE_TYPE_UNKNOWN":
      return AuthenticateTypeEnum.AUTHENTICATE_TYPE_UNKNOWN;
    case 1:
    case "AUTHENTICATE_TYPE_CERT":
      return AuthenticateTypeEnum.AUTHENTICATE_TYPE_CERT;
    case 2:
    case "AUTHENTICATE_TYPE_TOKEN":
      return AuthenticateTypeEnum.AUTHENTICATE_TYPE_TOKEN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AuthenticateTypeEnum.UNRECOGNIZED;
  }
}

export function authenticateTypeEnumToJSON(object: AuthenticateTypeEnum): string {
  switch (object) {
    case AuthenticateTypeEnum.AUTHENTICATE_TYPE_UNKNOWN:
      return "AUTHENTICATE_TYPE_UNKNOWN";
    case AuthenticateTypeEnum.AUTHENTICATE_TYPE_CERT:
      return "AUTHENTICATE_TYPE_CERT";
    case AuthenticateTypeEnum.AUTHENTICATE_TYPE_TOKEN:
      return "AUTHENTICATE_TYPE_TOKEN";
    case AuthenticateTypeEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** 流数据类型 */
export enum StreamDataTagEnum {
  /** STREAM_DATA_TAG_HEAD - 描述数据 */
  STREAM_DATA_TAG_HEAD = 0,
  /** STREAM_DATA_TAG_BODY - 业务数据 */
  STREAM_DATA_TAG_BODY = 1,
  /** STREAM_DATA_TAG_TAIL - 业务数据 */
  STREAM_DATA_TAG_TAIL = 2,
  UNRECOGNIZED = -1,
}

export function streamDataTagEnumFromJSON(object: any): StreamDataTagEnum {
  switch (object) {
    case 0:
    case "STREAM_DATA_TAG_HEAD":
      return StreamDataTagEnum.STREAM_DATA_TAG_HEAD;
    case 1:
    case "STREAM_DATA_TAG_BODY":
      return StreamDataTagEnum.STREAM_DATA_TAG_BODY;
    case 2:
    case "STREAM_DATA_TAG_TAIL":
      return StreamDataTagEnum.STREAM_DATA_TAG_TAIL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return StreamDataTagEnum.UNRECOGNIZED;
  }
}

export function streamDataTagEnumToJSON(object: StreamDataTagEnum): string {
  switch (object) {
    case StreamDataTagEnum.STREAM_DATA_TAG_HEAD:
      return "STREAM_DATA_TAG_HEAD";
    case StreamDataTagEnum.STREAM_DATA_TAG_BODY:
      return "STREAM_DATA_TAG_BODY";
    case StreamDataTagEnum.STREAM_DATA_TAG_TAIL:
      return "STREAM_DATA_TAG_TAIL";
    case StreamDataTagEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** 区块链网络类型 */
export enum NetworkTypeEnum {
  /** NETWORK_TYPE_UNKNOWN - 未知编码，是一种占位符 */
  NETWORK_TYPE_UNKNOWN = 0,
  /** NETWORK_TYPE_YEYING - 夜莺网络 */
  NETWORK_TYPE_YEYING = 2020,
  UNRECOGNIZED = -1,
}

export function networkTypeEnumFromJSON(object: any): NetworkTypeEnum {
  switch (object) {
    case 0:
    case "NETWORK_TYPE_UNKNOWN":
      return NetworkTypeEnum.NETWORK_TYPE_UNKNOWN;
    case 2020:
    case "NETWORK_TYPE_YEYING":
      return NetworkTypeEnum.NETWORK_TYPE_YEYING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NetworkTypeEnum.UNRECOGNIZED;
  }
}

export function networkTypeEnumToJSON(object: NetworkTypeEnum): string {
  switch (object) {
    case NetworkTypeEnum.NETWORK_TYPE_UNKNOWN:
      return "NETWORK_TYPE_UNKNOWN";
    case NetworkTypeEnum.NETWORK_TYPE_YEYING:
      return "NETWORK_TYPE_YEYING";
    case NetworkTypeEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
