// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               v3.19.1
// source: yeying/api/common/message.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  ApplicationCodeEnum,
  applicationCodeEnumFromJSON,
  applicationCodeEnumToJSON,
  AuthenticateTypeEnum,
  authenticateTypeEnumFromJSON,
  authenticateTypeEnumToJSON,
  CipherTypeEnum,
  cipherTypeEnumFromJSON,
  cipherTypeEnumToJSON,
  IdentityCodeEnum,
  identityCodeEnumFromJSON,
  identityCodeEnumToJSON,
  NetworkTypeEnum,
  networkTypeEnumFromJSON,
  networkTypeEnumToJSON,
  ResponseCodeEnum,
  responseCodeEnumFromJSON,
  responseCodeEnumToJSON,
  ServiceCodeEnum,
  serviceCodeEnumFromJSON,
  serviceCodeEnumToJSON,
} from "./code";

export const protobufPackage = "yeying.api.common";

export interface MessageHeader {
  did: string;
  authType: AuthenticateTypeEnum;
  authContent: string;
  nonce: string;
  timestamp: string;
  version: number;
}

export interface ResponseStatus {
  /** 响应状态码 */
  code: ResponseCodeEnum;
  /** 可读的消息 */
  message: string;
}

export interface ResponsePage {
  /** 总的记录数 */
  total: number;
  /** 页面索引，从1开始 */
  page: number;
  /** 页面大小 */
  pageSize: number;
}

export interface RequestPage {
  /** 页面索引，从1开始 */
  page: number;
  /** 页面大小 */
  pageSize: number;
}

export interface IdentityMetadata {
  /** 身份父亲 */
  parent: string;
  /** 身份所在网络 */
  network: NetworkTypeEnum;
  /** 身份did */
  did: string;
  /** 身份版本 */
  version: number;
  /** 区块链地址 */
  address: string;
  /** 身份名称 */
  name: string;
  /** 身份描述 */
  description: string;
  /** 身份编码 */
  code: IdentityCodeEnum;
  /** 身份头像 */
  avatar: string;
  /** 身份创建utc时间 */
  created: string;
  /** 身份修改utc时间 */
  checkpoint: string;
}

export interface BlockAddress {
  identifier: string;
  address: string;
  privateKey: string;
  publicKey: string;
  mnemonic: Mnemonic | undefined;
}

export interface Mnemonic {
  phrase: string;
  path: string;
  locale: string;
  password: string;
}

export interface IdentityServiceExtend {
  code: ServiceCodeEnum;
  apis: string;
  proxy: string;
  grpc: string;
  securityConfig: SecurityConfig | undefined;
}

export interface IdentityOrganizationExtend {
  address: string;
  code: string;
  securityConfig: SecurityConfig | undefined;
}

export interface IdentityPersonalExtend {
  email: string;
  telephone: string;
  securityConfig: SecurityConfig | undefined;
}

export interface IdentityApplicationExtend {
  code: ApplicationCodeEnum;
  serviceCodes: ServiceCodeEnum[];
  location: string;
  hash: string;
  securityConfig: SecurityConfig | undefined;
}

export interface SecurityConfig {
  algorithm: SecurityAlgorithm | undefined;
}

export interface SecurityAlgorithm {
  type: CipherTypeEnum;
  iv: string;
}

function createBaseMessageHeader(): MessageHeader {
  return { did: "", authType: 0, authContent: "", nonce: "", timestamp: "", version: 0 };
}

export const MessageHeader: MessageFns<MessageHeader> = {
  encode(message: MessageHeader, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.did !== "") {
      writer.uint32(10).string(message.did);
    }
    if (message.authType !== 0) {
      writer.uint32(16).int32(message.authType);
    }
    if (message.authContent !== "") {
      writer.uint32(26).string(message.authContent);
    }
    if (message.nonce !== "") {
      writer.uint32(34).string(message.nonce);
    }
    if (message.timestamp !== "") {
      writer.uint32(42).string(message.timestamp);
    }
    if (message.version !== 0) {
      writer.uint32(48).uint32(message.version);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MessageHeader {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessageHeader();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.did = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.authType = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.authContent = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.nonce = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.timestamp = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.version = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MessageHeader {
    return {
      did: isSet(object.did) ? globalThis.String(object.did) : "",
      authType: isSet(object.authType) ? authenticateTypeEnumFromJSON(object.authType) : 0,
      authContent: isSet(object.authContent) ? globalThis.String(object.authContent) : "",
      nonce: isSet(object.nonce) ? globalThis.String(object.nonce) : "",
      timestamp: isSet(object.timestamp) ? globalThis.String(object.timestamp) : "",
      version: isSet(object.version) ? globalThis.Number(object.version) : 0,
    };
  },

  toJSON(message: MessageHeader): unknown {
    const obj: any = {};
    if (message.did !== "") {
      obj.did = message.did;
    }
    if (message.authType !== 0) {
      obj.authType = authenticateTypeEnumToJSON(message.authType);
    }
    if (message.authContent !== "") {
      obj.authContent = message.authContent;
    }
    if (message.nonce !== "") {
      obj.nonce = message.nonce;
    }
    if (message.timestamp !== "") {
      obj.timestamp = message.timestamp;
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MessageHeader>, I>>(base?: I): MessageHeader {
    return MessageHeader.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MessageHeader>, I>>(object: I): MessageHeader {
    const message = createBaseMessageHeader();
    message.did = object.did ?? "";
    message.authType = object.authType ?? 0;
    message.authContent = object.authContent ?? "";
    message.nonce = object.nonce ?? "";
    message.timestamp = object.timestamp ?? "";
    message.version = object.version ?? 0;
    return message;
  },
};

function createBaseResponseStatus(): ResponseStatus {
  return { code: 0, message: "" };
}

export const ResponseStatus: MessageFns<ResponseStatus> = {
  encode(message: ResponseStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResponseStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponseStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResponseStatus {
    return {
      code: isSet(object.code) ? responseCodeEnumFromJSON(object.code) : 0,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: ResponseStatus): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = responseCodeEnumToJSON(message.code);
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResponseStatus>, I>>(base?: I): ResponseStatus {
    return ResponseStatus.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResponseStatus>, I>>(object: I): ResponseStatus {
    const message = createBaseResponseStatus();
    message.code = object.code ?? 0;
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseResponsePage(): ResponsePage {
  return { total: 0, page: 0, pageSize: 0 };
}

export const ResponsePage: MessageFns<ResponsePage> = {
  encode(message: ResponsePage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.total !== 0) {
      writer.uint32(8).uint32(message.total);
    }
    if (message.page !== 0) {
      writer.uint32(24).uint32(message.page);
    }
    if (message.pageSize !== 0) {
      writer.uint32(32).uint32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResponsePage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponsePage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.total = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.page = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.pageSize = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResponsePage {
    return {
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
    };
  },

  toJSON(message: ResponsePage): unknown {
    const obj: any = {};
    if (message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResponsePage>, I>>(base?: I): ResponsePage {
    return ResponsePage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResponsePage>, I>>(object: I): ResponsePage {
    const message = createBaseResponsePage();
    message.total = object.total ?? 0;
    message.page = object.page ?? 0;
    message.pageSize = object.pageSize ?? 0;
    return message;
  },
};

function createBaseRequestPage(): RequestPage {
  return { page: 0, pageSize: 0 };
}

export const RequestPage: MessageFns<RequestPage> = {
  encode(message: RequestPage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.page !== 0) {
      writer.uint32(8).uint32(message.page);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).uint32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RequestPage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestPage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.page = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RequestPage {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
    };
  },

  toJSON(message: RequestPage): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RequestPage>, I>>(base?: I): RequestPage {
    return RequestPage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RequestPage>, I>>(object: I): RequestPage {
    const message = createBaseRequestPage();
    message.page = object.page ?? 0;
    message.pageSize = object.pageSize ?? 0;
    return message;
  },
};

function createBaseIdentityMetadata(): IdentityMetadata {
  return {
    parent: "",
    network: 0,
    did: "",
    version: 0,
    address: "",
    name: "",
    description: "",
    code: 0,
    avatar: "",
    created: "",
    checkpoint: "",
  };
}

export const IdentityMetadata: MessageFns<IdentityMetadata> = {
  encode(message: IdentityMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.network !== 0) {
      writer.uint32(16).int32(message.network);
    }
    if (message.did !== "") {
      writer.uint32(26).string(message.did);
    }
    if (message.version !== 0) {
      writer.uint32(32).uint32(message.version);
    }
    if (message.address !== "") {
      writer.uint32(42).string(message.address);
    }
    if (message.name !== "") {
      writer.uint32(50).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(58).string(message.description);
    }
    if (message.code !== 0) {
      writer.uint32(64).int32(message.code);
    }
    if (message.avatar !== "") {
      writer.uint32(74).string(message.avatar);
    }
    if (message.created !== "") {
      writer.uint32(82).string(message.created);
    }
    if (message.checkpoint !== "") {
      writer.uint32(90).string(message.checkpoint);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IdentityMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIdentityMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.network = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.did = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.version = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.avatar = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.created = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.checkpoint = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IdentityMetadata {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      network: isSet(object.network) ? networkTypeEnumFromJSON(object.network) : 0,
      did: isSet(object.did) ? globalThis.String(object.did) : "",
      version: isSet(object.version) ? globalThis.Number(object.version) : 0,
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      code: isSet(object.code) ? identityCodeEnumFromJSON(object.code) : 0,
      avatar: isSet(object.avatar) ? globalThis.String(object.avatar) : "",
      created: isSet(object.created) ? globalThis.String(object.created) : "",
      checkpoint: isSet(object.checkpoint) ? globalThis.String(object.checkpoint) : "",
    };
  },

  toJSON(message: IdentityMetadata): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.network !== 0) {
      obj.network = networkTypeEnumToJSON(message.network);
    }
    if (message.did !== "") {
      obj.did = message.did;
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.code !== 0) {
      obj.code = identityCodeEnumToJSON(message.code);
    }
    if (message.avatar !== "") {
      obj.avatar = message.avatar;
    }
    if (message.created !== "") {
      obj.created = message.created;
    }
    if (message.checkpoint !== "") {
      obj.checkpoint = message.checkpoint;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IdentityMetadata>, I>>(base?: I): IdentityMetadata {
    return IdentityMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IdentityMetadata>, I>>(object: I): IdentityMetadata {
    const message = createBaseIdentityMetadata();
    message.parent = object.parent ?? "";
    message.network = object.network ?? 0;
    message.did = object.did ?? "";
    message.version = object.version ?? 0;
    message.address = object.address ?? "";
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.code = object.code ?? 0;
    message.avatar = object.avatar ?? "";
    message.created = object.created ?? "";
    message.checkpoint = object.checkpoint ?? "";
    return message;
  },
};

function createBaseBlockAddress(): BlockAddress {
  return { identifier: "", address: "", privateKey: "", publicKey: "", mnemonic: undefined };
}

export const BlockAddress: MessageFns<BlockAddress> = {
  encode(message: BlockAddress, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.identifier !== "") {
      writer.uint32(10).string(message.identifier);
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    if (message.privateKey !== "") {
      writer.uint32(26).string(message.privateKey);
    }
    if (message.publicKey !== "") {
      writer.uint32(34).string(message.publicKey);
    }
    if (message.mnemonic !== undefined) {
      Mnemonic.encode(message.mnemonic, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BlockAddress {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlockAddress();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.identifier = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.privateKey = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.publicKey = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.mnemonic = Mnemonic.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BlockAddress {
    return {
      identifier: isSet(object.identifier) ? globalThis.String(object.identifier) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      privateKey: isSet(object.privateKey) ? globalThis.String(object.privateKey) : "",
      publicKey: isSet(object.publicKey) ? globalThis.String(object.publicKey) : "",
      mnemonic: isSet(object.mnemonic) ? Mnemonic.fromJSON(object.mnemonic) : undefined,
    };
  },

  toJSON(message: BlockAddress): unknown {
    const obj: any = {};
    if (message.identifier !== "") {
      obj.identifier = message.identifier;
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.privateKey !== "") {
      obj.privateKey = message.privateKey;
    }
    if (message.publicKey !== "") {
      obj.publicKey = message.publicKey;
    }
    if (message.mnemonic !== undefined) {
      obj.mnemonic = Mnemonic.toJSON(message.mnemonic);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BlockAddress>, I>>(base?: I): BlockAddress {
    return BlockAddress.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BlockAddress>, I>>(object: I): BlockAddress {
    const message = createBaseBlockAddress();
    message.identifier = object.identifier ?? "";
    message.address = object.address ?? "";
    message.privateKey = object.privateKey ?? "";
    message.publicKey = object.publicKey ?? "";
    message.mnemonic = (object.mnemonic !== undefined && object.mnemonic !== null)
      ? Mnemonic.fromPartial(object.mnemonic)
      : undefined;
    return message;
  },
};

function createBaseMnemonic(): Mnemonic {
  return { phrase: "", path: "", locale: "", password: "" };
}

export const Mnemonic: MessageFns<Mnemonic> = {
  encode(message: Mnemonic, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.phrase !== "") {
      writer.uint32(10).string(message.phrase);
    }
    if (message.path !== "") {
      writer.uint32(18).string(message.path);
    }
    if (message.locale !== "") {
      writer.uint32(26).string(message.locale);
    }
    if (message.password !== "") {
      writer.uint32(34).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Mnemonic {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMnemonic();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.phrase = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.locale = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.password = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Mnemonic {
    return {
      phrase: isSet(object.phrase) ? globalThis.String(object.phrase) : "",
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      locale: isSet(object.locale) ? globalThis.String(object.locale) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
    };
  },

  toJSON(message: Mnemonic): unknown {
    const obj: any = {};
    if (message.phrase !== "") {
      obj.phrase = message.phrase;
    }
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.locale !== "") {
      obj.locale = message.locale;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Mnemonic>, I>>(base?: I): Mnemonic {
    return Mnemonic.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Mnemonic>, I>>(object: I): Mnemonic {
    const message = createBaseMnemonic();
    message.phrase = object.phrase ?? "";
    message.path = object.path ?? "";
    message.locale = object.locale ?? "";
    message.password = object.password ?? "";
    return message;
  },
};

function createBaseIdentityServiceExtend(): IdentityServiceExtend {
  return { code: 0, apis: "", proxy: "", grpc: "", securityConfig: undefined };
}

export const IdentityServiceExtend: MessageFns<IdentityServiceExtend> = {
  encode(message: IdentityServiceExtend, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.apis !== "") {
      writer.uint32(18).string(message.apis);
    }
    if (message.proxy !== "") {
      writer.uint32(26).string(message.proxy);
    }
    if (message.grpc !== "") {
      writer.uint32(34).string(message.grpc);
    }
    if (message.securityConfig !== undefined) {
      SecurityConfig.encode(message.securityConfig, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IdentityServiceExtend {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIdentityServiceExtend();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.apis = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.proxy = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.grpc = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.securityConfig = SecurityConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IdentityServiceExtend {
    return {
      code: isSet(object.code) ? serviceCodeEnumFromJSON(object.code) : 0,
      apis: isSet(object.apis) ? globalThis.String(object.apis) : "",
      proxy: isSet(object.proxy) ? globalThis.String(object.proxy) : "",
      grpc: isSet(object.grpc) ? globalThis.String(object.grpc) : "",
      securityConfig: isSet(object.securityConfig) ? SecurityConfig.fromJSON(object.securityConfig) : undefined,
    };
  },

  toJSON(message: IdentityServiceExtend): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = serviceCodeEnumToJSON(message.code);
    }
    if (message.apis !== "") {
      obj.apis = message.apis;
    }
    if (message.proxy !== "") {
      obj.proxy = message.proxy;
    }
    if (message.grpc !== "") {
      obj.grpc = message.grpc;
    }
    if (message.securityConfig !== undefined) {
      obj.securityConfig = SecurityConfig.toJSON(message.securityConfig);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IdentityServiceExtend>, I>>(base?: I): IdentityServiceExtend {
    return IdentityServiceExtend.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IdentityServiceExtend>, I>>(object: I): IdentityServiceExtend {
    const message = createBaseIdentityServiceExtend();
    message.code = object.code ?? 0;
    message.apis = object.apis ?? "";
    message.proxy = object.proxy ?? "";
    message.grpc = object.grpc ?? "";
    message.securityConfig = (object.securityConfig !== undefined && object.securityConfig !== null)
      ? SecurityConfig.fromPartial(object.securityConfig)
      : undefined;
    return message;
  },
};

function createBaseIdentityOrganizationExtend(): IdentityOrganizationExtend {
  return { address: "", code: "", securityConfig: undefined };
}

export const IdentityOrganizationExtend: MessageFns<IdentityOrganizationExtend> = {
  encode(message: IdentityOrganizationExtend, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.code !== "") {
      writer.uint32(18).string(message.code);
    }
    if (message.securityConfig !== undefined) {
      SecurityConfig.encode(message.securityConfig, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IdentityOrganizationExtend {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIdentityOrganizationExtend();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.code = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.securityConfig = SecurityConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IdentityOrganizationExtend {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      securityConfig: isSet(object.securityConfig) ? SecurityConfig.fromJSON(object.securityConfig) : undefined,
    };
  },

  toJSON(message: IdentityOrganizationExtend): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (message.securityConfig !== undefined) {
      obj.securityConfig = SecurityConfig.toJSON(message.securityConfig);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IdentityOrganizationExtend>, I>>(base?: I): IdentityOrganizationExtend {
    return IdentityOrganizationExtend.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IdentityOrganizationExtend>, I>>(object: I): IdentityOrganizationExtend {
    const message = createBaseIdentityOrganizationExtend();
    message.address = object.address ?? "";
    message.code = object.code ?? "";
    message.securityConfig = (object.securityConfig !== undefined && object.securityConfig !== null)
      ? SecurityConfig.fromPartial(object.securityConfig)
      : undefined;
    return message;
  },
};

function createBaseIdentityPersonalExtend(): IdentityPersonalExtend {
  return { email: "", telephone: "", securityConfig: undefined };
}

export const IdentityPersonalExtend: MessageFns<IdentityPersonalExtend> = {
  encode(message: IdentityPersonalExtend, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    if (message.telephone !== "") {
      writer.uint32(18).string(message.telephone);
    }
    if (message.securityConfig !== undefined) {
      SecurityConfig.encode(message.securityConfig, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IdentityPersonalExtend {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIdentityPersonalExtend();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.telephone = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.securityConfig = SecurityConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IdentityPersonalExtend {
    return {
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      telephone: isSet(object.telephone) ? globalThis.String(object.telephone) : "",
      securityConfig: isSet(object.securityConfig) ? SecurityConfig.fromJSON(object.securityConfig) : undefined,
    };
  },

  toJSON(message: IdentityPersonalExtend): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.telephone !== "") {
      obj.telephone = message.telephone;
    }
    if (message.securityConfig !== undefined) {
      obj.securityConfig = SecurityConfig.toJSON(message.securityConfig);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IdentityPersonalExtend>, I>>(base?: I): IdentityPersonalExtend {
    return IdentityPersonalExtend.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IdentityPersonalExtend>, I>>(object: I): IdentityPersonalExtend {
    const message = createBaseIdentityPersonalExtend();
    message.email = object.email ?? "";
    message.telephone = object.telephone ?? "";
    message.securityConfig = (object.securityConfig !== undefined && object.securityConfig !== null)
      ? SecurityConfig.fromPartial(object.securityConfig)
      : undefined;
    return message;
  },
};

function createBaseIdentityApplicationExtend(): IdentityApplicationExtend {
  return { code: 0, serviceCodes: [], location: "", hash: "", securityConfig: undefined };
}

export const IdentityApplicationExtend: MessageFns<IdentityApplicationExtend> = {
  encode(message: IdentityApplicationExtend, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    writer.uint32(18).fork();
    for (const v of message.serviceCodes) {
      writer.int32(v);
    }
    writer.join();
    if (message.location !== "") {
      writer.uint32(26).string(message.location);
    }
    if (message.hash !== "") {
      writer.uint32(34).string(message.hash);
    }
    if (message.securityConfig !== undefined) {
      SecurityConfig.encode(message.securityConfig, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IdentityApplicationExtend {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIdentityApplicationExtend();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag === 16) {
            message.serviceCodes.push(reader.int32() as any);

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.serviceCodes.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.location = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.hash = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.securityConfig = SecurityConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IdentityApplicationExtend {
    return {
      code: isSet(object.code) ? applicationCodeEnumFromJSON(object.code) : 0,
      serviceCodes: globalThis.Array.isArray(object?.serviceCodes)
        ? object.serviceCodes.map((e: any) => serviceCodeEnumFromJSON(e))
        : [],
      location: isSet(object.location) ? globalThis.String(object.location) : "",
      hash: isSet(object.hash) ? globalThis.String(object.hash) : "",
      securityConfig: isSet(object.securityConfig) ? SecurityConfig.fromJSON(object.securityConfig) : undefined,
    };
  },

  toJSON(message: IdentityApplicationExtend): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = applicationCodeEnumToJSON(message.code);
    }
    if (message.serviceCodes?.length) {
      obj.serviceCodes = message.serviceCodes.map((e) => serviceCodeEnumToJSON(e));
    }
    if (message.location !== "") {
      obj.location = message.location;
    }
    if (message.hash !== "") {
      obj.hash = message.hash;
    }
    if (message.securityConfig !== undefined) {
      obj.securityConfig = SecurityConfig.toJSON(message.securityConfig);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IdentityApplicationExtend>, I>>(base?: I): IdentityApplicationExtend {
    return IdentityApplicationExtend.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IdentityApplicationExtend>, I>>(object: I): IdentityApplicationExtend {
    const message = createBaseIdentityApplicationExtend();
    message.code = object.code ?? 0;
    message.serviceCodes = object.serviceCodes?.map((e) => e) || [];
    message.location = object.location ?? "";
    message.hash = object.hash ?? "";
    message.securityConfig = (object.securityConfig !== undefined && object.securityConfig !== null)
      ? SecurityConfig.fromPartial(object.securityConfig)
      : undefined;
    return message;
  },
};

function createBaseSecurityConfig(): SecurityConfig {
  return { algorithm: undefined };
}

export const SecurityConfig: MessageFns<SecurityConfig> = {
  encode(message: SecurityConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.algorithm !== undefined) {
      SecurityAlgorithm.encode(message.algorithm, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SecurityConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecurityConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.algorithm = SecurityAlgorithm.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SecurityConfig {
    return { algorithm: isSet(object.algorithm) ? SecurityAlgorithm.fromJSON(object.algorithm) : undefined };
  },

  toJSON(message: SecurityConfig): unknown {
    const obj: any = {};
    if (message.algorithm !== undefined) {
      obj.algorithm = SecurityAlgorithm.toJSON(message.algorithm);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SecurityConfig>, I>>(base?: I): SecurityConfig {
    return SecurityConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SecurityConfig>, I>>(object: I): SecurityConfig {
    const message = createBaseSecurityConfig();
    message.algorithm = (object.algorithm !== undefined && object.algorithm !== null)
      ? SecurityAlgorithm.fromPartial(object.algorithm)
      : undefined;
    return message;
  },
};

function createBaseSecurityAlgorithm(): SecurityAlgorithm {
  return { type: 0, iv: "" };
}

export const SecurityAlgorithm: MessageFns<SecurityAlgorithm> = {
  encode(message: SecurityAlgorithm, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.iv !== "") {
      writer.uint32(18).string(message.iv);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SecurityAlgorithm {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecurityAlgorithm();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.iv = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SecurityAlgorithm {
    return {
      type: isSet(object.type) ? cipherTypeEnumFromJSON(object.type) : 0,
      iv: isSet(object.iv) ? globalThis.String(object.iv) : "",
    };
  },

  toJSON(message: SecurityAlgorithm): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = cipherTypeEnumToJSON(message.type);
    }
    if (message.iv !== "") {
      obj.iv = message.iv;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SecurityAlgorithm>, I>>(base?: I): SecurityAlgorithm {
    return SecurityAlgorithm.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SecurityAlgorithm>, I>>(object: I): SecurityAlgorithm {
    const message = createBaseSecurityAlgorithm();
    message.type = object.type ?? 0;
    message.iv = object.iv ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
